generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Product related schemas

model Product {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  description    String
  imageUrl       String
  name           String
  price          Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  CartItem       CartItem[]
  ProductVariant ProductVariant[]

  @@map("products")
}

model Size {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  productVariants ProductVariant[] // Relation with ProductVariant model

  @@map("sizes")
}

model Color {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  code            String // For hex color code or specific color code
  productVariants ProductVariant[] // Relation with ProductVariant model

  @@map("colors")
}

model ProductVariant {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  size      Size    @relation(fields: [sizeId], references: [id])
  sizeId    String  @db.ObjectId
  color     Color   @relation(fields: [colorId], references: [id])
  colorId   String  @db.ObjectId
  quantity  Int // Quantity available for this specific variant

  @@unique([productId, sizeId, colorId])
  @@map("product_variants")
}

// Cart related schemas

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  items     CartItem[]
  createdAt DateTime   @updatedAt
  updatedAt DateTime   @updatedAt
  User      User?      @relation(fields: [userId], references: [id])
  userId    String?    @db.ObjectId

  @@map("carts")
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cartitems")
}

// User related schemas

model Review {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  comment String
  rating  Int
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId

  @@map("reviews")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Cart          Cart[]
  Review        Review[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}
