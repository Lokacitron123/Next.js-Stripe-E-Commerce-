generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Product related schemas

model Product {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  description     String
  name            String     @unique
  price           Int
  genderCategory  String
  productCategory String
  defaultImg      String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  cartItems       CartItem[]
  variant         Variant[]
  review          Review[]

  @@map("products")
}

model Variant {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  image     String
  color     String
  size      String
  quantity  Int
  Product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String     @db.ObjectId
  CartItem  CartItem[]

  @@map("variants")
}

// Cart related schemas

// Cart is the model that holds all CartItems that is added by a user
// Cart is linked to a user, but not required because a user that is not logged in will be able to create a cart
// A cart created by a user that is not logged in will be stored in localStorage
// When the user logs in and if there is a cart in localStorage, that cart can be used to populate a cart in the database for that particular user
model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  items     CartItem[]
  createdAt DateTime   @updatedAt
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?    @db.ObjectId

  @@map("carts")
}

// A CartItem is an individual product item that goes into the Cart
model CartItem {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  productId         String  @db.ObjectId
  product           Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity          Int
  selectedVariant   Variant @relation(fields: [selectedVariantId], references: [id])
  selectedVariantId String  @db.ObjectId
  cartId            String  @db.ObjectId
  cart              Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cartitems")
}

// Order related schemas

model Order {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  orderId        String           @unique
  totalAmount    Int
  status         String
  createdAt      DateTime         @updatedAt
  updatedAt      DateTime         @updatedAt
  userId         String           @db.ObjectId
  user           User             @relation(fields: [userId], references: [id])
  orderedProduct OrderedProduct[]

  @@map("orders")
}

model OrderedProduct {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  price           Int
  quantity        Int
  genderCategory  String
  productCategory String
  defaultImg      String
  Order           Order?  @relation(fields: [orderId], references: [id])
  orderId         String? @db.ObjectId

  @@map("orderedproducts")
}

// User related schemas

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  rating    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?  @db.ObjectId

  @@map("reviews")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Cart          Cart[]
  Review        Review[]
  Order         Order[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}
